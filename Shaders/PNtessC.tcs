#version 450 core
layout (vertices =1) out;

float GetTessLevelStep(float distA, float distB) ;
void CalcPositions();
vec3 ProjectToPlane(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal) ;
vec3 getNormal(vec3 a, vec3 b, vec3 c) ;

uniform float maxDivisions;
uniform vec3 eyePos;

in vec3 vPos[];
in vec2 vTexCoords[] ;

struct OutputPatch
{
    vec3 WorldPos_B030;
    vec3 WorldPos_B021;
    vec3 WorldPos_B012;
    vec3 WorldPos_B003;
    vec3 WorldPos_B102;
    vec3 WorldPos_B201;
    vec3 WorldPos_B300;
    vec3 WorldPos_B210;
    vec3 WorldPos_B120;
    vec3 WorldPos_B111;
    vec2 tc_texCoords[3];
};

// attributes of the output CPs
out patch OutputPatch oPatch;

void main()
{
   for (int i = 0 ; i < 3 ; i++) 
   {
       oPatch.tc_texCoords[i] = vTexCoords[i];
   }

   CalcPositions();
   float eyeToVertexDist0 = distance(eyePos, vPos[0]);
   float eyeToVertexDist1 = distance(eyePos, vPos[1]);
   float eyeToVertexDist2 = distance(eyePos, vPos[2]);
   gl_TessLevelOuter[0] = GetTessLevelStep(eyeToVertexDist1, eyeToVertexDist2);
   gl_TessLevelOuter[1] = GetTessLevelStep(eyeToVertexDist2, eyeToVertexDist0);
   gl_TessLevelOuter[2] = GetTessLevelStep(eyeToVertexDist0, eyeToVertexDist1);
   gl_TessLevelInner[0] = GetTessLevelStep(eyeToVertexDist0, eyeToVertexDist1);
}

vec3 getNormal(vec3 a, vec3 b, vec3 c)
{
    vec3 e1 = vec3(b - a);
    vec3 e2 = vec3(c - a);
    return normalize(cross(e1, e2));
}

void CalcPositions()
{
    // The original vertices stay the same
    oPatch.WorldPos_B030 = vPos[0];
    oPatch.WorldPos_B003 = vPos[1];
    oPatch.WorldPos_B300 = vPos[2];

    // Edges are names according to the opposing vertex
    vec3 EdgeB300 = oPatch.WorldPos_B003 - oPatch.WorldPos_B030;
    vec3 EdgeB030 = oPatch.WorldPos_B300 - oPatch.WorldPos_B003;
    vec3 EdgeB003 = oPatch.WorldPos_B030 - oPatch.WorldPos_B300;

    // Generate two midpoints on each edge
    oPatch.WorldPos_B021 = oPatch.WorldPos_B030 + EdgeB300 / 3.0;
    oPatch.WorldPos_B012 = oPatch.WorldPos_B030 + EdgeB300 * 2.0 / 3.0;
    oPatch.WorldPos_B102 = oPatch.WorldPos_B003 + EdgeB030 / 3.0;
    oPatch.WorldPos_B201 = oPatch.WorldPos_B003 + EdgeB030 * 2.0 / 3.0;
    oPatch.WorldPos_B210 = oPatch.WorldPos_B300 + EdgeB003 / 3.0;
    oPatch.WorldPos_B120 = oPatch.WorldPos_B300 + EdgeB003 * 2.0 / 3.0;

    // Project each midpoint on the plane defined by the nearest vertex and its normal
    oPatch.WorldPos_B021 = ProjectToPlane(oPatch.WorldPos_B021, oPatch.WorldPos_B030,
                                          oPatch.tc_norms[0]);
    oPatch.WorldPos_B012 = ProjectToPlane(oPatch.WorldPos_B012, oPatch.WorldPos_B003,
                                         oPatch.tc_norms[1]);
    oPatch.WorldPos_B102 = ProjectToPlane(oPatch.WorldPos_B102, oPatch.WorldPos_B003,
                                         oPatch.tc_norms[1]);
    oPatch.WorldPos_B201 = ProjectToPlane(oPatch.WorldPos_B201, oPatch.WorldPos_B300,
                                         oPatch.tc_norms[2]);
    oPatch.WorldPos_B210 = ProjectToPlane(oPatch.WorldPos_B210, oPatch.WorldPos_B300,
                                         oPatch.tc_norms[2]);
    oPatch.WorldPos_B120 = ProjectToPlane(oPatch.WorldPos_B120, oPatch.WorldPos_B030,
                                         oPatch.tc_norms[0]);

    // Handle the center
    vec3 Center = (oPatch.WorldPos_B003 + oPatch.WorldPos_B030 + oPatch.WorldPos_B300) / 3.0;
    oPatch.WorldPos_B111 = (oPatch.WorldPos_B021 + oPatch.WorldPos_B012 + oPatch.WorldPos_B102 +
                          oPatch.WorldPos_B201 + oPatch.WorldPos_B210 + oPatch.WorldPos_B120) / 6.0;
    oPatch.WorldPos_B111 += (oPatch.WorldPos_B111 - Center)/2 ;
}


vec3 ProjectToPlane(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal)
{
    vec3 v = Point - PlanePoint;
    float Len = dot(v, PlaneNormal);
    vec3 d = Len * PlaneNormal;
    return (Point - d);
}

float GetTessLevelStep(float distA, float distB)
{
	float avgDist = (distA + distB) / 2.0f;
	
	if (avgDist <= 1) { return 150;  }
	else if (avgDist <= 2.5) { return 100;  }
	else if (avgDist <= 4) { return 75;  }
	else if (avgDist <= 7.5) { return 50;  }
	else if (avgDist <= 10) { return 25;  }
	else if (avgDist <= 25) { return 15;  }
	else if (avgDist <= 50) { return 10;  }
	else if (avgDist <= 75) { return 5; }
	else if (avgDist <= 100) { return 3; }
	else if (avgDist <= 125) { return 1.5; }
	else if (avgDist <= 150) { return 1.25; }
	else { return 1; }
}

float GetTessLevelExpo(float distA, float distB)
{
	float avgDist = (distA + distB) / 2.0f;
	return clamp(maxDivisions - (avgDist * 0.5), 1, maxDivisions);
}