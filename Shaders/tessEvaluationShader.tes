#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 eyePos;

uniform float fogDensity;
uniform float fogDistance;

uniform sampler2D heightMapTex;
uniform float heightMapScale;

// read in vector arrays from previous shader
in vec3 tCPos[];
in vec2 tCTexCoords[];

// pass along the interpolated values
out vec3 tEPos;
out vec2 tETexCoords;
out vec3 tENormals;

out vec3 tEEyePos;
out float tEVisibility;

void main()
{
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates
   tEPos = interpolate3D(tCPos[0], tCPos[1], tCPos[2]) ;
   tETexCoords = interpolate2D(tCTexCoords[0], tCTexCoords[1], tCTexCoords[2]);

	float left = (textureOffset(heightMapTex, tETexCoords, ivec2(-1,0)).r) * heightMapScale;
	float right = (textureOffset(heightMapTex, tETexCoords, ivec2(1,0)).r) * heightMapScale;
	float up = (textureOffset(heightMapTex, tETexCoords, ivec2(0,1)).r) * heightMapScale;
	float down = (textureOffset(heightMapTex, tETexCoords, ivec2(0,-1)).r) * heightMapScale;
	float lr = left - right;
	float du = up - down;
	tENormals = normalize(vec3(lr, 2.0f, du));

   float height = texture(heightMapTex, tETexCoords).r;
   tEPos.y = height * heightMapScale; 
   gl_Position = projection * view * vec4(tEPos, 1.0); 
   
   float distance2Cam = distance(eyePos, tEPos);
   tEVisibility = exp(-pow((distance2Cam * fogDensity), fogDistance));
   tEVisibility = clamp(tEVisibility, 0.0, 1.0);
   
   tEEyePos = eyePos;
}

//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}